/*
 * Items
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.ResponseIdModel;

import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for Api
 */
@Ignore
public class ApiTest {

    private final Api api;

    public ApiTest(Api api) {
        this.api = api;
    }

    
    /**
     * Create a new item.
     *
     * A resource is created by using its code. The filed \&quot;uuid\&quot; is not accepted in the payload. The \&quot;uuid\&quot; value will be generated automatically by the system if the resource is successfully created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOST1Test() throws ApiException {
        String itemCreateDto = null;
        ResponseIdModel response = api.createUsingPOST1(itemCreateDto);

        // TODO: test validations
    }
    
    /**
     * Delete a specific item identified by a code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteByCodeUsingDELETE1Test() throws ApiException {
        String code = null;
        ResponseIdModel response = api.deleteByCodeUsingDELETE1(code);

        // TODO: test validations
    }
    
    /**
     * Delete a specific item identified by a uuid.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETE1Test() throws ApiException {
        UUID uuid = null;
        ResponseIdModel response = api.deleteUsingDELETE1(uuid);

        // TODO: test validations
    }
    
    /**
     * Get details about a specific item identified by a code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readItemUsingGET1Test() throws ApiException {
        String code = null;
        String response = api.readItemUsingGET1(code);

        // TODO: test validations
    }
    
    /**
     * Get details about a specific item identified by a uuid.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readItemUsingGET3Test() throws ApiException {
        UUID uuid = null;
        String response = api.readItemUsingGET3(uuid);

        // TODO: test validations
    }
    
    /**
     * List items (all items or a selection of items).
     *
     * An empty list is returned if no items are available.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readItemsUsingGET1Test() throws ApiException {
        String activeStatus = null;
        String filter = null;
        Integer pageLimit = null;
        Integer pageOffset = null;
        List<String> sort = null;
        String response = api.readItemsUsingGET1(activeStatus, filter, pageLimit, pageOffset, sort);

        // TODO: test validations
    }
    
    /**
     * Update a specific item identified by a code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPUT1Test() throws ApiException {
        String itemDto = null;
        String code = null;
        ResponseIdModel response = api.updateUsingPUT1(itemDto, code);

        // TODO: test validations
    }
    
    /**
     * Update a specific item identified by a uuid.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPUT3Test() throws ApiException {
        String itemDto = null;
        UUID uuid = null;
        ResponseIdModel response = api.updateUsingPUT3(itemDto, uuid);

        // TODO: test validations
    }
    
}
