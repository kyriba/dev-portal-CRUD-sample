/*
 * Items
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.config.InitialApiBean;
import io.swagger.client.ResponseIdModel;
import org.springframework.stereotype.Service;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class Api {
    private ApiClient apiClient;

    private final String requestPath;

    private final InitialApiBean bean;

    public Api(ApiClient apiClient, InitialApiBean bean) {
        this.apiClient = apiClient;
        this.bean = bean;
        requestPath = bean.getApiName();
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUsingPOST1
     * @param itemCreateDto String (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUsingPOST1Call(String itemCreateDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = itemCreateDto;

        // create path and map variables

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUsingPOST1ValidateBeforeCall(String itemCreateDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemCreateDto' is set
        if (itemCreateDto == null) {
            throw new ApiException("Missing the required parameter 'itemCreateDto' when calling createUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = createUsingPOST1Call(itemCreateDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new item.
     * A resource is created by using its code. The filed \&quot;uuid\&quot; is not accepted in the payload. The \&quot;uuid\&quot; value will be generated automatically by the system if the resource is successfully created.
     * @param itemCreateDto String (required)
     * @return ResponseIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseIdModel createUsingPOST1(String itemCreateDto) throws ApiException {
        ApiResponse<ResponseIdModel> resp = createUsingPOST1WithHttpInfo(itemCreateDto);
        return resp.getData();
    }

    /**
     * Create a new item.
     * A resource is created by using its code. The filed \&quot;uuid\&quot; is not accepted in the payload. The \&quot;uuid\&quot; value will be generated automatically by the system if the resource is successfully created.
     * @param itemCreateDto String (required)
     * @return ApiResponse&lt;ResponseIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseIdModel> createUsingPOST1WithHttpInfo(String itemCreateDto) throws ApiException {
        com.squareup.okhttp.Call call = createUsingPOST1ValidateBeforeCall(itemCreateDto, null, null);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new item. (asynchronously)
     * A resource is created by using its code. The filed \&quot;uuid\&quot; is not accepted in the payload. The \&quot;uuid\&quot; value will be generated automatically by the system if the resource is successfully created.
     * @param itemCreateDto String (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUsingPOST1Async(String itemCreateDto, final ApiCallback<ResponseIdModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUsingPOST1ValidateBeforeCall(itemCreateDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteByCodeUsingDELETE1
     * @param code Code of the item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteByCodeUsingDELETE1Call(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code={code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath + localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteByCodeUsingDELETE1ValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteByCodeUsingDELETE1(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteByCodeUsingDELETE1Call(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a specific item identified by a code.
     * 
     * @param code Code of the item (required)
     * @return ResponseIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseIdModel deleteByCodeUsingDELETE1(String code) throws ApiException {
        ApiResponse<ResponseIdModel> resp = deleteByCodeUsingDELETE1WithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Delete a specific item identified by a code.
     * 
     * @param code Code of the item (required)
     * @return ApiResponse&lt;ResponseIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseIdModel> deleteByCodeUsingDELETE1WithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = deleteByCodeUsingDELETE1ValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a specific item identified by a code. (asynchronously)
     * 
     * @param code Code of the item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteByCodeUsingDELETE1Async(String code, final ApiCallback<ResponseIdModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteByCodeUsingDELETE1ValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUsingDELETE1
     * @param uuid UUID of the item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUsingDELETE1Call(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath + localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUsingDELETE1ValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteUsingDELETE1(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUsingDELETE1Call(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a specific item identified by a uuid.
     * 
     * @param uuid UUID of the item (required)
     * @return ResponseIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseIdModel deleteUsingDELETE1(UUID uuid) throws ApiException {
        ApiResponse<ResponseIdModel> resp = deleteUsingDELETE1WithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Delete a specific item identified by a uuid.
     * 
     * @param uuid UUID of the item (required)
     * @return ApiResponse&lt;ResponseIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseIdModel> deleteUsingDELETE1WithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteUsingDELETE1ValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a specific item identified by a uuid. (asynchronously)
     * 
     * @param uuid UUID of the item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUsingDELETE1Async(UUID uuid, final ApiCallback<ResponseIdModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUsingDELETE1ValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readItemUsingGET1
     * @param code The code of the item returned by GET /items. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readItemUsingGET1Call(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code={code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath + localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readItemUsingGET1ValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling readItemUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = readItemUsingGET1Call(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get details about a specific item identified by a code.
     * 
     * @param code The code of the item returned by GET /items. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String readItemUsingGET1(String code) throws ApiException {
        ApiResponse<String> resp = readItemUsingGET1WithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Get details about a specific item identified by a code.
     * 
     * @param code The code of the item returned by GET /items. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> readItemUsingGET1WithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = readItemUsingGET1ValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details about a specific item identified by a code. (asynchronously)
     * 
     * @param code The code of the item returned by GET /items. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readItemUsingGET1Async(String code, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readItemUsingGET1ValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readItemUsingGET3
     * @param uuid The UUID of the item returned by GET /items. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readItemUsingGET3Call(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath + localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readItemUsingGET3ValidateBeforeCall(UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling readItemUsingGET3(Async)");
        }
        

        com.squareup.okhttp.Call call = readItemUsingGET3Call(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get details about a specific item identified by a uuid.
     * 
     * @param uuid The UUID of the item returned by GET /items. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String readItemUsingGET3(UUID uuid) throws ApiException {
        ApiResponse<String> resp = readItemUsingGET3WithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Get details about a specific item identified by a uuid.
     * 
     * @param uuid The UUID of the item returned by GET /items. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> readItemUsingGET3WithHttpInfo(UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = readItemUsingGET3ValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details about a specific item identified by a uuid. (asynchronously)
     * 
     * @param uuid The UUID of the item returned by GET /items. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readItemUsingGET3Async(UUID uuid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readItemUsingGET3ValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readItemsUsingGET1
     * @param activeStatus activeStatus (optional)
     * @param filter Filter represents search query on RSQL language. The fields which can be used in filter query are defined in description for endpoint.  The following RSQL comparing operators are supported: &#x3D;&#x3D; : Evaluates to true if the attribute is equal to the value. !&#x3D; : Evaluates to true if the attribute is not equal to the value. &#x3D;in&#x3D; : Evaluates to true if the attribute exactly matches any of the values in the list. &#x3D;out&#x3D; : Evaluates to true if the attribute does not match any of the values in the list. &#x3D;&#x3D;ABC* : Similar to SQL like &#39;ABC%. &#x3D;&#x3D;*ABC : Similar to SQL like &#39;%ABC. &#x3D;&#x3D;*ABC* : Similar to SQL like &#39;%ABC%. &#x3D;lt&#x3D; : Evaluates to true if the attribute is less than the value. &#x3D;gt&#x3D; : Evaluates to true if the attribute is greater than the value. &#x3D;le&#x3D; : Evaluates to true if the attribute is less than or equal to the value. &#x3D;ge&#x3D; : Evaluates to true if the attribute is greater than or equal to the value.  Logical Operators: RSQL expression is composed of one or more comparisons, related to each other with logical operators: Logical AND &#39;**;**&#39; or &#39;**and**&#39; Logical OR &#39;**,**&#39; or &#39;**or**&#39;.  Argument can be a single value, or multiple values in parenthesis separated by comma. Value that doesn’t contain any reserved character or a white space can be unquoted, other arguments must be enclosed in single or double quotes. (optional)
     * @param pageLimit Limit the number of records per page. (optional)
     * @param pageOffset Page Offset means the number of records you want to skip before starting reading. (optional)
     * @param sort Specify the comma-separated list of fields used to order the records. By default, ascending ordering is used. Example: **-code** means descending order by field {code}. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readItemsUsingGET1Call(String activeStatus, String filter, Integer pageLimit, Integer pageOffset, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activeStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activeStatus", activeStatus));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (pageLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page.limit", pageLimit));
        if (pageOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page.offset", pageOffset));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readItemsUsingGET1ValidateBeforeCall(String activeStatus, String filter, Integer pageLimit, Integer pageOffset, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = readItemsUsingGET1Call(activeStatus, filter, pageLimit, pageOffset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List items (all items or a selection of items).
     * An empty list is returned if no items are available.
     * @param activeStatus activeStatus (optional)
     * @param filter Filter represents search query on RSQL language. The fields which can be used in filter query are defined in description for endpoint.  The following RSQL comparing operators are supported: &#x3D;&#x3D; : Evaluates to true if the attribute is equal to the value. !&#x3D; : Evaluates to true if the attribute is not equal to the value. &#x3D;in&#x3D; : Evaluates to true if the attribute exactly matches any of the values in the list. &#x3D;out&#x3D; : Evaluates to true if the attribute does not match any of the values in the list. &#x3D;&#x3D;ABC* : Similar to SQL like &#39;ABC%. &#x3D;&#x3D;*ABC : Similar to SQL like &#39;%ABC. &#x3D;&#x3D;*ABC* : Similar to SQL like &#39;%ABC%. &#x3D;lt&#x3D; : Evaluates to true if the attribute is less than the value. &#x3D;gt&#x3D; : Evaluates to true if the attribute is greater than the value. &#x3D;le&#x3D; : Evaluates to true if the attribute is less than or equal to the value. &#x3D;ge&#x3D; : Evaluates to true if the attribute is greater than or equal to the value.  Logical Operators: RSQL expression is composed of one or more comparisons, related to each other with logical operators: Logical AND &#39;**;**&#39; or &#39;**and**&#39; Logical OR &#39;**,**&#39; or &#39;**or**&#39;.  Argument can be a single value, or multiple values in parenthesis separated by comma. Value that doesn’t contain any reserved character or a white space can be unquoted, other arguments must be enclosed in single or double quotes. (optional)
     * @param pageLimit Limit the number of records per page. (optional)
     * @param pageOffset Page Offset means the number of records you want to skip before starting reading. (optional)
     * @param sort Specify the comma-separated list of fields used to order the records. By default, ascending ordering is used. Example: **-code** means descending order by field {code}. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String readItemsUsingGET1(String activeStatus, String filter, Integer pageLimit, Integer pageOffset, List<String> sort) throws ApiException {
        ApiResponse<String> resp = readItemsUsingGET1WithHttpInfo(activeStatus, filter, pageLimit, pageOffset, sort);
        return resp.getData();
    }

    /**
     * List items (all items or a selection of items).
     * An empty list is returned if no items are available.
     * @param activeStatus activeStatus (optional)
     * @param filter Filter represents search query on RSQL language. The fields which can be used in filter query are defined in description for endpoint.  The following RSQL comparing operators are supported: &#x3D;&#x3D; : Evaluates to true if the attribute is equal to the value. !&#x3D; : Evaluates to true if the attribute is not equal to the value. &#x3D;in&#x3D; : Evaluates to true if the attribute exactly matches any of the values in the list. &#x3D;out&#x3D; : Evaluates to true if the attribute does not match any of the values in the list. &#x3D;&#x3D;ABC* : Similar to SQL like &#39;ABC%. &#x3D;&#x3D;*ABC : Similar to SQL like &#39;%ABC. &#x3D;&#x3D;*ABC* : Similar to SQL like &#39;%ABC%. &#x3D;lt&#x3D; : Evaluates to true if the attribute is less than the value. &#x3D;gt&#x3D; : Evaluates to true if the attribute is greater than the value. &#x3D;le&#x3D; : Evaluates to true if the attribute is less than or equal to the value. &#x3D;ge&#x3D; : Evaluates to true if the attribute is greater than or equal to the value.  Logical Operators: RSQL expression is composed of one or more comparisons, related to each other with logical operators: Logical AND &#39;**;**&#39; or &#39;**and**&#39; Logical OR &#39;**,**&#39; or &#39;**or**&#39;.  Argument can be a single value, or multiple values in parenthesis separated by comma. Value that doesn’t contain any reserved character or a white space can be unquoted, other arguments must be enclosed in single or double quotes. (optional)
     * @param pageLimit Limit the number of records per page. (optional)
     * @param pageOffset Page Offset means the number of records you want to skip before starting reading. (optional)
     * @param sort Specify the comma-separated list of fields used to order the records. By default, ascending ordering is used. Example: **-code** means descending order by field {code}. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> readItemsUsingGET1WithHttpInfo(String activeStatus, String filter, Integer pageLimit, Integer pageOffset, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = readItemsUsingGET1ValidateBeforeCall(activeStatus, filter, pageLimit, pageOffset, sort, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List items (all items or a selection of items). (asynchronously)
     * An empty list is returned if no items are available.
     * @param activeStatus activeStatus (optional)
     * @param filter Filter represents search query on RSQL language. The fields which can be used in filter query are defined in description for endpoint.  The following RSQL comparing operators are supported: &#x3D;&#x3D; : Evaluates to true if the attribute is equal to the value. !&#x3D; : Evaluates to true if the attribute is not equal to the value. &#x3D;in&#x3D; : Evaluates to true if the attribute exactly matches any of the values in the list. &#x3D;out&#x3D; : Evaluates to true if the attribute does not match any of the values in the list. &#x3D;&#x3D;ABC* : Similar to SQL like &#39;ABC%. &#x3D;&#x3D;*ABC : Similar to SQL like &#39;%ABC. &#x3D;&#x3D;*ABC* : Similar to SQL like &#39;%ABC%. &#x3D;lt&#x3D; : Evaluates to true if the attribute is less than the value. &#x3D;gt&#x3D; : Evaluates to true if the attribute is greater than the value. &#x3D;le&#x3D; : Evaluates to true if the attribute is less than or equal to the value. &#x3D;ge&#x3D; : Evaluates to true if the attribute is greater than or equal to the value.  Logical Operators: RSQL expression is composed of one or more comparisons, related to each other with logical operators: Logical AND &#39;**;**&#39; or &#39;**and**&#39; Logical OR &#39;**,**&#39; or &#39;**or**&#39;.  Argument can be a single value, or multiple values in parenthesis separated by comma. Value that doesn’t contain any reserved character or a white space can be unquoted, other arguments must be enclosed in single or double quotes. (optional)
     * @param pageLimit Limit the number of records per page. (optional)
     * @param pageOffset Page Offset means the number of records you want to skip before starting reading. (optional)
     * @param sort Specify the comma-separated list of fields used to order the records. By default, ascending ordering is used. Example: **-code** means descending order by field {code}. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readItemsUsingGET1Async(String activeStatus, String filter, Integer pageLimit, Integer pageOffset, List<String> sort, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readItemsUsingGET1ValidateBeforeCall(activeStatus, filter, pageLimit, pageOffset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUsingPUT1
     * @param itemDto String (required)
     * @param code The code of the item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUsingPUT1Call(String itemDto, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = itemDto;

        // create path and map variables
        String localVarPath = "/code={code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath + localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUsingPUT1ValidateBeforeCall(String itemDto, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemDto' is set
        if (itemDto == null) {
            throw new ApiException("Missing the required parameter 'itemDto' when calling updateUsingPUT1(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateUsingPUT1(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUsingPUT1Call(itemDto, code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a specific item identified by a code.
     * 
     * @param itemDto String (required)
     * @param code The code of the item (required)
     * @return ResponseIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseIdModel updateUsingPUT1(String itemDto, String code) throws ApiException {
        ApiResponse<ResponseIdModel> resp = updateUsingPUT1WithHttpInfo(itemDto, code);
        return resp.getData();
    }

    /**
     * Update a specific item identified by a code.
     * 
     * @param itemDto String (required)
     * @param code The code of the item (required)
     * @return ApiResponse&lt;ResponseIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseIdModel> updateUsingPUT1WithHttpInfo(String itemDto, String code) throws ApiException {
        com.squareup.okhttp.Call call = updateUsingPUT1ValidateBeforeCall(itemDto, code, null, null);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific item identified by a code. (asynchronously)
     * 
     * @param itemDto String (required)
     * @param code The code of the item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUsingPUT1Async(String itemDto, String code, final ApiCallback<ResponseIdModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUsingPUT1ValidateBeforeCall(itemDto, code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUsingPUT3
     * @param itemDto String (required)
     * @param uuid The UUID of the item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUsingPUT3Call(String itemDto, UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = itemDto;

        // create path and map variables
        String localVarPath = "/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentials" };
        return apiClient.buildCall(requestPath + localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUsingPUT3ValidateBeforeCall(String itemDto, UUID uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemDto' is set
        if (itemDto == null) {
            throw new ApiException("Missing the required parameter 'itemDto' when calling updateUsingPUT3(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateUsingPUT3(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUsingPUT3Call(itemDto, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a specific item identified by a uuid.
     * 
     * @param itemDto String (required)
     * @param uuid The UUID of the item (required)
     * @return ResponseIdModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseIdModel updateUsingPUT3(String itemDto, UUID uuid) throws ApiException {
        ApiResponse<ResponseIdModel> resp = updateUsingPUT3WithHttpInfo(itemDto, uuid);
        return resp.getData();
    }

    /**
     * Update a specific item identified by a uuid.
     * 
     * @param itemDto String (required)
     * @param uuid The UUID of the item (required)
     * @return ApiResponse&lt;ResponseIdModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseIdModel> updateUsingPUT3WithHttpInfo(String itemDto, UUID uuid) throws ApiException {
        com.squareup.okhttp.Call call = updateUsingPUT3ValidateBeforeCall(itemDto, uuid, null, null);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific item identified by a uuid. (asynchronously)
     * 
     * @param itemDto String (required)
     * @param uuid The UUID of the item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUsingPUT3Async(String itemDto, UUID uuid, final ApiCallback<ResponseIdModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUsingPUT3ValidateBeforeCall(itemDto, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseIdModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
